#!/usr/bin/env bash
# WANT_JSON

exec 4>&1

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"

  local pth_log="$(mktemp -t XXXXXX)"
  local done=
  exec 1>>"$pth_log"
  exec 2>>"$pth_log"
  set -exfu

  if [[ "$#" -gt 0 ]]; then
    eval $(cat "$1" | jq -r 'to_entries | map(select(.value | type == "string")) | map("\(.key)=" + @sh "\(.value)") | .[]')
    shift
  fi

  if doit; then
    exec 1>&4
    done=1
    jq -n -c -M \
      --arg log "$pth_log" \
      --arg version "$(git rev-parse HEAD)" \
      --arg branch "$(git rev-parse --abbrev-ref HEAD)" \
    '{
      changed: true,
      version: "\($version)",
      branch: "\($branch)",
      msg: "\($log)"
    }'
  else
    exec 1>&4
    jq -n -c -M \
      --arg log "$pth_log" \
      --arg version "$(git rev-parse HEAD)" \
      --arg branch "$(git rev-parse --abbrev-ref HEAD)" \
    '{
      failed: true,
      version: "\($version)",
      branch: "\($branch)",
      msg: "\($log)"
    }'
  fi
}

function doit {
  cd "$BLOCK_PATH"

  local nm_workarea="${as:-${repo##*/}}"
  if [[ ! -d "${nm_workarea}" ]]; then
    local opt_branch="${branch:+ -b "${branch}"}"
    git clone$opt_branch "$repo" "${nm_workarea}"
    cd "${nm_workarea}"
  else
    cd "${nm_workarea}"
    if [[ -n "${branch:-}" ]]; then
      git checkout -f "${branch}"
    fi
  fi

  if [[ -n "${version}" ]]; then
    git reset --hard "${version}"
  else
    git pull || { git reset --hard && git pull; }
  fi

  if [[ -d ~/.env.d ]]; then
    envdir ~/.env.d block bootstrap
  else
    block bootstrap
  fi
}

main "$@"
